
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYrightUMINUSFACTOR FLOAT INT L_BRACKET L_SQ_BRACKET MINUS MULTIPLY PLUS R_BRACKET R_SQ_BRACKETstatement : expression\n        expression : expression MULTIPLY expression\n                   | expression PLUS expression\n                   | expression MINUS expression\n        expression : MINUS expression %prec UMINUSexpression : L_BRACKET expression R_BRACKET\n        expression : INT\n                   | FLOAT\n                   | FACTOR\n        '
    
_lr_action_items = {'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,],[3,10,3,3,-7,-8,-9,3,3,3,-5,10,-2,-3,-4,-6,]),'L_BRACKET':([0,3,4,8,9,10,],[4,4,4,4,4,4,]),'INT':([0,3,4,8,9,10,],[5,5,5,5,5,5,]),'FLOAT':([0,3,4,8,9,10,],[6,6,6,6,6,6,]),'FACTOR':([0,3,4,8,9,10,],[7,7,7,7,7,7,]),'$end':([1,2,5,6,7,11,13,14,15,16,],[0,-1,-7,-8,-9,-5,-2,-3,-4,-6,]),'MULTIPLY':([2,5,6,7,11,12,13,14,15,16,],[8,-7,-8,-9,-5,8,-2,8,8,-6,]),'PLUS':([2,5,6,7,11,12,13,14,15,16,],[9,-7,-8,-9,-5,9,-2,-3,-4,-6,]),'R_BRACKET':([5,6,7,11,12,13,14,15,16,],[-7,-8,-9,-5,16,-2,-3,-4,-6,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,3,4,8,9,10,],[2,11,12,13,14,15,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement','risk_parser.py',18),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','risk_parser.py',23),
  ('expression -> expression PLUS expression','expression',3,'p_expression','risk_parser.py',24),
  ('expression -> expression MINUS expression','expression',3,'p_expression','risk_parser.py',25),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','risk_parser.py',30),
  ('expression -> L_BRACKET expression R_BRACKET','expression',3,'p_expression_group','risk_parser.py',34),
  ('expression -> INT','expression',1,'p_expression_number_factor','risk_parser.py',39),
  ('expression -> FLOAT','expression',1,'p_expression_number_factor','risk_parser.py',40),
  ('expression -> FACTOR','expression',1,'p_expression_number_factor','risk_parser.py',41),
]
