Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     expression -> expression PLUS expression
Rule 3     expression -> expression MINUS expression
Rule 4     expression -> INT MULTIPLY FACTOR
Rule 5     expression -> FLOAT MULTIPLY FACTOR
Rule 6     expression -> MINUS expression
Rule 7     expression -> L_BRACKET expression R_BRACKET
Rule 8     expression -> INT
Rule 9     expression -> FLOAT
Rule 10    expression -> FACTOR

Terminals, with rules where they appear

FACTOR               : 4 5 10
FLOAT                : 5 9
INT                  : 4 8
L_BRACKET            : 7
MINUS                : 3 6
MULTIPLY             : 4 5
PLUS                 : 2
R_BRACKET            : 7
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 2 3 3 6 7
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . INT MULTIPLY FACTOR
    (5) expression -> . FLOAT MULTIPLY FACTOR
    (6) expression -> . MINUS expression
    (7) expression -> . L_BRACKET expression R_BRACKET
    (8) expression -> . INT
    (9) expression -> . FLOAT
    (10) expression -> . FACTOR

    INT             shift and go to state 4
    FLOAT           shift and go to state 6
    MINUS           shift and go to state 3
    L_BRACKET       shift and go to state 7
    FACTOR          shift and go to state 5

    statement                      shift and go to state 1
    expression                     shift and go to state 2

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression

    $end            reduce using rule 1 (statement -> expression .)
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9


state 3

    (6) expression -> MINUS . expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . INT MULTIPLY FACTOR
    (5) expression -> . FLOAT MULTIPLY FACTOR
    (6) expression -> . MINUS expression
    (7) expression -> . L_BRACKET expression R_BRACKET
    (8) expression -> . INT
    (9) expression -> . FLOAT
    (10) expression -> . FACTOR

    INT             shift and go to state 4
    FLOAT           shift and go to state 6
    MINUS           shift and go to state 3
    L_BRACKET       shift and go to state 7
    FACTOR          shift and go to state 5

    expression                     shift and go to state 10

state 4

    (4) expression -> INT . MULTIPLY FACTOR
    (8) expression -> INT .

    MULTIPLY        shift and go to state 11
    PLUS            reduce using rule 8 (expression -> INT .)
    MINUS           reduce using rule 8 (expression -> INT .)
    $end            reduce using rule 8 (expression -> INT .)
    R_BRACKET       reduce using rule 8 (expression -> INT .)


state 5

    (10) expression -> FACTOR .

    PLUS            reduce using rule 10 (expression -> FACTOR .)
    MINUS           reduce using rule 10 (expression -> FACTOR .)
    $end            reduce using rule 10 (expression -> FACTOR .)
    R_BRACKET       reduce using rule 10 (expression -> FACTOR .)


state 6

    (5) expression -> FLOAT . MULTIPLY FACTOR
    (9) expression -> FLOAT .

    MULTIPLY        shift and go to state 12
    PLUS            reduce using rule 9 (expression -> FLOAT .)
    MINUS           reduce using rule 9 (expression -> FLOAT .)
    $end            reduce using rule 9 (expression -> FLOAT .)
    R_BRACKET       reduce using rule 9 (expression -> FLOAT .)


state 7

    (7) expression -> L_BRACKET . expression R_BRACKET
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . INT MULTIPLY FACTOR
    (5) expression -> . FLOAT MULTIPLY FACTOR
    (6) expression -> . MINUS expression
    (7) expression -> . L_BRACKET expression R_BRACKET
    (8) expression -> . INT
    (9) expression -> . FLOAT
    (10) expression -> . FACTOR

    INT             shift and go to state 4
    FLOAT           shift and go to state 6
    MINUS           shift and go to state 3
    L_BRACKET       shift and go to state 7
    FACTOR          shift and go to state 5

    expression                     shift and go to state 13

state 8

    (2) expression -> expression PLUS . expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . INT MULTIPLY FACTOR
    (5) expression -> . FLOAT MULTIPLY FACTOR
    (6) expression -> . MINUS expression
    (7) expression -> . L_BRACKET expression R_BRACKET
    (8) expression -> . INT
    (9) expression -> . FLOAT
    (10) expression -> . FACTOR

    INT             shift and go to state 4
    FLOAT           shift and go to state 6
    MINUS           shift and go to state 3
    L_BRACKET       shift and go to state 7
    FACTOR          shift and go to state 5

    expression                     shift and go to state 14

state 9

    (3) expression -> expression MINUS . expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression MINUS expression
    (4) expression -> . INT MULTIPLY FACTOR
    (5) expression -> . FLOAT MULTIPLY FACTOR
    (6) expression -> . MINUS expression
    (7) expression -> . L_BRACKET expression R_BRACKET
    (8) expression -> . INT
    (9) expression -> . FLOAT
    (10) expression -> . FACTOR

    INT             shift and go to state 4
    FLOAT           shift and go to state 6
    MINUS           shift and go to state 3
    L_BRACKET       shift and go to state 7
    FACTOR          shift and go to state 5

    expression                     shift and go to state 15

state 10

    (6) expression -> MINUS expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression

    PLUS            reduce using rule 6 (expression -> MINUS expression .)
    MINUS           reduce using rule 6 (expression -> MINUS expression .)
    $end            reduce using rule 6 (expression -> MINUS expression .)
    R_BRACKET       reduce using rule 6 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]


state 11

    (4) expression -> INT MULTIPLY . FACTOR

    FACTOR          shift and go to state 16


state 12

    (5) expression -> FLOAT MULTIPLY . FACTOR

    FACTOR          shift and go to state 17


state 13

    (7) expression -> L_BRACKET expression . R_BRACKET
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression

    R_BRACKET       shift and go to state 18
    PLUS            shift and go to state 8
    MINUS           shift and go to state 9


state 14

    (2) expression -> expression PLUS expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression

    PLUS            reduce using rule 2 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 2 (expression -> expression PLUS expression .)
    $end            reduce using rule 2 (expression -> expression PLUS expression .)
    R_BRACKET       reduce using rule 2 (expression -> expression PLUS expression .)

  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]


state 15

    (3) expression -> expression MINUS expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . MINUS expression

    PLUS            reduce using rule 3 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 3 (expression -> expression MINUS expression .)
    $end            reduce using rule 3 (expression -> expression MINUS expression .)
    R_BRACKET       reduce using rule 3 (expression -> expression MINUS expression .)

  ! PLUS            [ shift and go to state 8 ]
  ! MINUS           [ shift and go to state 9 ]


state 16

    (4) expression -> INT MULTIPLY FACTOR .

    PLUS            reduce using rule 4 (expression -> INT MULTIPLY FACTOR .)
    MINUS           reduce using rule 4 (expression -> INT MULTIPLY FACTOR .)
    $end            reduce using rule 4 (expression -> INT MULTIPLY FACTOR .)
    R_BRACKET       reduce using rule 4 (expression -> INT MULTIPLY FACTOR .)


state 17

    (5) expression -> FLOAT MULTIPLY FACTOR .

    PLUS            reduce using rule 5 (expression -> FLOAT MULTIPLY FACTOR .)
    MINUS           reduce using rule 5 (expression -> FLOAT MULTIPLY FACTOR .)
    $end            reduce using rule 5 (expression -> FLOAT MULTIPLY FACTOR .)
    R_BRACKET       reduce using rule 5 (expression -> FLOAT MULTIPLY FACTOR .)


state 18

    (7) expression -> L_BRACKET expression R_BRACKET .

    PLUS            reduce using rule 7 (expression -> L_BRACKET expression R_BRACKET .)
    MINUS           reduce using rule 7 (expression -> L_BRACKET expression R_BRACKET .)
    $end            reduce using rule 7 (expression -> L_BRACKET expression R_BRACKET .)
    R_BRACKET       reduce using rule 7 (expression -> L_BRACKET expression R_BRACKET .)

