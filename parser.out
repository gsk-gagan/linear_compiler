Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    L_SQ_BRACKET
    R_SQ_BRACKET

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     expression -> expression MULTIPLY expression
Rule 3     expression -> expression PLUS expression
Rule 4     expression -> expression MINUS expression
Rule 5     expression -> MINUS expression
Rule 6     expression -> L_BRACKET expression R_BRACKET
Rule 7     expression -> INT
Rule 8     expression -> FLOAT
Rule 9     expression -> FACTOR

Terminals, with rules where they appear

FACTOR               : 9
FLOAT                : 8
INT                  : 7
L_BRACKET            : 6
L_SQ_BRACKET         : 
MINUS                : 4 5
MULTIPLY             : 2
PLUS                 : 3
R_BRACKET            : 6
R_SQ_BRACKET         : 
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 2 3 3 4 4 5 6
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) expression -> . expression MULTIPLY expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . MINUS expression
    (6) expression -> . L_BRACKET expression R_BRACKET
    (7) expression -> . INT
    (8) expression -> . FLOAT
    (9) expression -> . FACTOR

    MINUS           shift and go to state 3
    L_BRACKET       shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    FACTOR          shift and go to state 7

    statement                      shift and go to state 1
    expression                     shift and go to state 2

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .
    (2) expression -> expression . MULTIPLY expression
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression

    $end            reduce using rule 1 (statement -> expression .)
    MULTIPLY        shift and go to state 8
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10


state 3

    (5) expression -> MINUS . expression
    (2) expression -> . expression MULTIPLY expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . MINUS expression
    (6) expression -> . L_BRACKET expression R_BRACKET
    (7) expression -> . INT
    (8) expression -> . FLOAT
    (9) expression -> . FACTOR

    MINUS           shift and go to state 3
    L_BRACKET       shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    FACTOR          shift and go to state 7

    expression                     shift and go to state 11

state 4

    (6) expression -> L_BRACKET . expression R_BRACKET
    (2) expression -> . expression MULTIPLY expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . MINUS expression
    (6) expression -> . L_BRACKET expression R_BRACKET
    (7) expression -> . INT
    (8) expression -> . FLOAT
    (9) expression -> . FACTOR

    MINUS           shift and go to state 3
    L_BRACKET       shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    FACTOR          shift and go to state 7

    expression                     shift and go to state 12

state 5

    (7) expression -> INT .

    MULTIPLY        reduce using rule 7 (expression -> INT .)
    PLUS            reduce using rule 7 (expression -> INT .)
    MINUS           reduce using rule 7 (expression -> INT .)
    $end            reduce using rule 7 (expression -> INT .)
    R_BRACKET       reduce using rule 7 (expression -> INT .)


state 6

    (8) expression -> FLOAT .

    MULTIPLY        reduce using rule 8 (expression -> FLOAT .)
    PLUS            reduce using rule 8 (expression -> FLOAT .)
    MINUS           reduce using rule 8 (expression -> FLOAT .)
    $end            reduce using rule 8 (expression -> FLOAT .)
    R_BRACKET       reduce using rule 8 (expression -> FLOAT .)


state 7

    (9) expression -> FACTOR .

    MULTIPLY        reduce using rule 9 (expression -> FACTOR .)
    PLUS            reduce using rule 9 (expression -> FACTOR .)
    MINUS           reduce using rule 9 (expression -> FACTOR .)
    $end            reduce using rule 9 (expression -> FACTOR .)
    R_BRACKET       reduce using rule 9 (expression -> FACTOR .)


state 8

    (2) expression -> expression MULTIPLY . expression
    (2) expression -> . expression MULTIPLY expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . MINUS expression
    (6) expression -> . L_BRACKET expression R_BRACKET
    (7) expression -> . INT
    (8) expression -> . FLOAT
    (9) expression -> . FACTOR

    MINUS           shift and go to state 3
    L_BRACKET       shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    FACTOR          shift and go to state 7

    expression                     shift and go to state 13

state 9

    (3) expression -> expression PLUS . expression
    (2) expression -> . expression MULTIPLY expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . MINUS expression
    (6) expression -> . L_BRACKET expression R_BRACKET
    (7) expression -> . INT
    (8) expression -> . FLOAT
    (9) expression -> . FACTOR

    MINUS           shift and go to state 3
    L_BRACKET       shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    FACTOR          shift and go to state 7

    expression                     shift and go to state 14

state 10

    (4) expression -> expression MINUS . expression
    (2) expression -> . expression MULTIPLY expression
    (3) expression -> . expression PLUS expression
    (4) expression -> . expression MINUS expression
    (5) expression -> . MINUS expression
    (6) expression -> . L_BRACKET expression R_BRACKET
    (7) expression -> . INT
    (8) expression -> . FLOAT
    (9) expression -> . FACTOR

    MINUS           shift and go to state 3
    L_BRACKET       shift and go to state 4
    INT             shift and go to state 5
    FLOAT           shift and go to state 6
    FACTOR          shift and go to state 7

    expression                     shift and go to state 15

state 11

    (5) expression -> MINUS expression .
    (2) expression -> expression . MULTIPLY expression
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression

    MULTIPLY        reduce using rule 5 (expression -> MINUS expression .)
    PLUS            reduce using rule 5 (expression -> MINUS expression .)
    MINUS           reduce using rule 5 (expression -> MINUS expression .)
    $end            reduce using rule 5 (expression -> MINUS expression .)
    R_BRACKET       reduce using rule 5 (expression -> MINUS expression .)

  ! MULTIPLY        [ shift and go to state 8 ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]


state 12

    (6) expression -> L_BRACKET expression . R_BRACKET
    (2) expression -> expression . MULTIPLY expression
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression

    R_BRACKET       shift and go to state 16
    MULTIPLY        shift and go to state 8
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10


state 13

    (2) expression -> expression MULTIPLY expression .
    (2) expression -> expression . MULTIPLY expression
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression

    MULTIPLY        reduce using rule 2 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 2 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 2 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 2 (expression -> expression MULTIPLY expression .)
    R_BRACKET       reduce using rule 2 (expression -> expression MULTIPLY expression .)

  ! MULTIPLY        [ shift and go to state 8 ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]


state 14

    (3) expression -> expression PLUS expression .
    (2) expression -> expression . MULTIPLY expression
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression

    PLUS            reduce using rule 3 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 3 (expression -> expression PLUS expression .)
    $end            reduce using rule 3 (expression -> expression PLUS expression .)
    R_BRACKET       reduce using rule 3 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 8

  ! MULTIPLY        [ reduce using rule 3 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]


state 15

    (4) expression -> expression MINUS expression .
    (2) expression -> expression . MULTIPLY expression
    (3) expression -> expression . PLUS expression
    (4) expression -> expression . MINUS expression

    PLUS            reduce using rule 4 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 4 (expression -> expression MINUS expression .)
    $end            reduce using rule 4 (expression -> expression MINUS expression .)
    R_BRACKET       reduce using rule 4 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 8

  ! MULTIPLY        [ reduce using rule 4 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 9 ]
  ! MINUS           [ shift and go to state 10 ]


state 16

    (6) expression -> L_BRACKET expression R_BRACKET .

    MULTIPLY        reduce using rule 6 (expression -> L_BRACKET expression R_BRACKET .)
    PLUS            reduce using rule 6 (expression -> L_BRACKET expression R_BRACKET .)
    MINUS           reduce using rule 6 (expression -> L_BRACKET expression R_BRACKET .)
    $end            reduce using rule 6 (expression -> L_BRACKET expression R_BRACKET .)
    R_BRACKET       reduce using rule 6 (expression -> L_BRACKET expression R_BRACKET .)

